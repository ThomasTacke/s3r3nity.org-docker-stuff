services:
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - --configFile=/etc/traefik/traefik_config.yml
    volumes:
      - ./traefik/letsencrypt/:/letsencrypt
      - ./traefik/config:/etc/traefik:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOMAIN=${DOMAIN}
      - TRAEFIK_BASIC_AUTH=${TRAEFIK_BASIC_AUTH}
      - CERT_RESOLVER=${CERT_RESOLVER}
    restart: always
    network_mode: service:gerbil
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus
    user: '0'
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=256MB'
    networks:
      - traefik
    restart: unless-stopped
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    user: '0'
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    networks:
      - traefik
    restart: unless-stopped
    logging:
      options:
        max-size: "10m"
        max-file: "3"   

  poste.io:
    image: analogic/poste.io:latest
    container_name: poste.io
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./poste.io/data:/data
    restart: always
    ports:
      - "25:25"
      - "110:110"
      - "143:143"
      - "587:587"
      - "993:993"
      - "995:995"
      - "4190:4190"
    environment:
      - HTTPS=${POSTE_IO_HTTPS}
      - VIRTUAL_HOST=mail.${DOMAIN}
      - HOSTNAME=mail.${DOMAIN}
    networks:
      - poste_io

  nextcloud.db:
    image: mariadb:10.11
    container_name: nextcloud_db
    restart: always
    volumes:
      - ./nextcloud/mysql/lib:/var/lib/mysql:rw
      - ./nextcloud/mysql/log:/var/log/mysql:rw
    environment:
      - MYSQL_ROOT_PASSWORD=${NEXTCLOUD_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${NEXTCLOUD_MYSQL_DATABASE}
      - MYSQL_USER=${NEXTCLOUD_MYSQL_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_MYSQL_PASSWORD}
    networks:
      - nextcloud
  
  nextcloud.redis:
    image: redis:alpine
    container_name: nextcloud_redis
    restart: always
    networks:
      - nextcloud
  
  nextcloud.app:
    image: nextcloud:apache
    container_name: nextcloud_app
    environment:
      - MYSQL_HOST=nextcloud_db
      - REDIS_HOST=nextcloud_redis
      - MYSQL_USER=${NEXTCLOUD_MYSQL_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_MYSQL_PASSWORD}
      - MYSQL_DATABASE=${NEXTCLOUD_MYSQL_DATABASE}
    volumes:
      - ./nextcloud/var/www/html/data:/var/www/html/data:rw
      - ./nextcloud/var/www/html/config:/var/www/html/config:rw
      - ./nextcloud/var/www/html/apps:/var/www/html/apps:rw
      - ./nextcloud/var/www/html/custom_apps:/var/www/html/custom_apps:rw
      - ./nextcloud/php.ini:/usr/local/etc/php/php.ini:rw
    restart: always
    depends_on:
      - nextcloud.db
      - nextcloud.redis
    networks:
      - nextcloud

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: always
    environment:
      DOMAIN: "https://bitwarden.${DOMAIN}"
      SIGNUPS_ALLOWED: "false"
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
    volumes:
      - ./bitwarden/data:/data/
    networks:
      - bitwarden

  onlinecv:
    image: rootthekid/onlinecv:v2.2.2
    container_name: onlinecv_web
    restart: always
    networks:
      - onlinecv

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    volumes:
      - ${IMMICH_UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    environment:
      - UPLOAD_LOCATION=${IMMICH_UPLOAD_LOCATION}
      - DB_DATA_LOCATION=${IMMICH_DB_DATA_LOCATION}
      - TZ=${IMMICH_TZ}
      - IMMICH_VERSION=${IMMICH_VERSION}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - DB_HOSTNAME=immich-database
      - REDIS_HOSTNAME=immich-redis
    depends_on:
      - immich-redis
      - immich-database
    restart: always
    networks:
      - immich

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - ${IMMICH_MODEL_LOCATION}:/cache
    environment:
      - UPLOAD_LOCATION=${IMMICH_UPLOAD_LOCATION}
      - DB_DATA_LOCATION=${IMMICH_DB_DATA_LOCATION}
      - TZ=${IMMICH_TZ}
      - IMMICH_VERSION=${IMMICH_VERSION}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - DB_HOSTNAME=immich-database
      - REDIS_HOSTNAME=immich-redis
    restart: always
    networks:
      - immich

  immich-redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:d6c2911ac51b289db208767581a5d154544f2b2fe4914ea5056443f62dc6e900
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always
    networks:
      - immich

  immich-database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${IMMICH_DB_PASSWORD}
      POSTGRES_USER: ${IMMICH_DB_USERNAME}
      POSTGRES_DB: ${IMMICH_DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${IMMICH_DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${IMMICH_DB_DATABASE_NAME}' || exit 1; Chksum="$$(psql --dbname='${IMMICH_DB_DATABASE_NAME}' --username='${IMMICH_DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_period: 5m
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    restart: always
    networks:
      - immich

  pangolin:
    image: fosrl/pangolin:1.3.1
    container_name: pangolin
    restart: unless-stopped
    volumes:
      - ./fossorial-pangolin:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/"]
      interval: "3s"
      timeout: "3s"
      retries: 15
    # environment:
    #   USERS_SERVERADMIN_EMAIL: ${PANGOLIN_USERS_SERVERADMIN_EMAIL}
    #   USERS_SERVERADMIN_PASSWORD: ${PANGOLIN_USERS_SERVERADMIN_PASSWORD}
    networks:
      - pangolin

  gerbil:
    image: fosrl/gerbil:1.0.0
    container_name: gerbil
    restart: unless-stopped
    depends_on:
      pangolin:
        condition: service_healthy
    command:
      - --reachableAt=http://gerbil:3003
      - --generateAndSaveKeyTo=/var/config/key
      - --remoteConfig=http://pangolin:3001/api/v1/gerbil/get-config
      - --reportBandwidthTo=http://pangolin:3001/api/v1/gerbil/receive-bandwidth
    volumes:
      - ./fossorial-pangolin/:/var/config
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    ports:
      - 51820:51820/udp
      - 80:80
      - 443:443
    networks:
      - pangolin
      - my_external
      - traefik
      - poste_io
      - nextcloud
      - bitwarden
      - onlinecv
      - immich

networks:
  my_external:
    external: true
  traefik:
    external: false
  poste_io:
    external: false
  nextcloud:
    external: false
  bitwarden:
    external: false
  onlinecv:
    external: false
  immich:
    external: false
  pangolin:
    external: false
